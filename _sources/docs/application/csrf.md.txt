# CSRF Attack vectors

* Predictable tokens: Verify if tokens generated by the application aren’t easily guessable or possible to be reversed (for example MD5 of iterated integers).
* Lack of Anti-CSRF Token verification
  * Verify if the Anti-CSRF token value is verified in case of both POST and GET requests.
  * Verify if the values of Anti-CSRF token like NULL, None, 0, [] could bypass verification.
  * Verify if the token is required (verification depends on token being present).
* Token used only as a Cookie: Cookie will be attached to the request made from another domain (if there is no SameSite flag). If this value isn’t replicated as a header or one of request parameters, it isn’t valid defense.
* Token not tied to the user session: Verify if it’s possible to use valid token from another session.
* XSS: Having XSS, it is possible to extract CSRF token and use it.
* Brute force: Always check token entropy with at least 1000-10000 probes. If there is some pattern of creating tokens or if they repeat themselves, it is possible to try brute force it.
* Vulnerable subdomain: Having subdomain which is vulnerable to XSS, subdomain takeover or cookie injection, the attacker is able to bypass:
  * CSRF-token protection
  * Double-submit cookie protection
  * Content-type based protection
* Cookie injection: In case of CRLF-injection of browser bugs, it is possible to bypass double-submit cookie protection through cookie injection.


